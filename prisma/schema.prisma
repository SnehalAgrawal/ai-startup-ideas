datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Idea {
  id           Int       @id @default(autoincrement())
  title        String
  slug         String    @unique
  category     String
  description  String
  mvp          String
  monetization String
  createdAt    DateTime  @default(now())
  votes        Vote[]
  bookmarks    Bookmark[]
  builders     Builder[]
  comments     Comment[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    String?
  ideaId    Int
  idea      Idea     @relation(fields: [ideaId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  createdAt DateTime @default(now())
  @@unique([userId, ideaId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    String?
  ideaId    Int
  idea      Idea     @relation(fields: [ideaId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@unique([userId, ideaId])
}

model Builder {
  id        Int      @id @default(autoincrement())
  userId    String?
  ideaId    Int
  idea      Idea     @relation(fields: [ideaId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    String
  createdAt DateTime @default(now())
  @@unique([userId, ideaId])
}

/// NextAuth models for user sessions and authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  votes         Vote[]
  bookmarks     Bookmark[]
  builders      Builder[]
  comments      Comment[]
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    String
  ideaId    Int
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
}